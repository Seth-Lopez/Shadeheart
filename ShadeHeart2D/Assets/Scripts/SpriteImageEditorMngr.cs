using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;

public class SpriteImageEditorMngr : MonoBehaviour
{
    public string originalSpriteSheetRelativePath = "Assets/images/[Ready]Modern Asset Packs/CharacterSheets/aaa.png";
    public string newSpriteSheetRelativePath = "Assets/images/[Ready]Modern Asset Packs/CharacterSheets/aaa_modified.png";
    public int spriteWidth = 16;
    public int spriteHeight = 32;
    public int xOffset = 4;
    public int yOffset = 4;
    public int extraPixelsLeft = 4; // New variable for extra pixels to the left

    void Start()
    {
        // Construct the absolute paths
        string originalSpriteSheetPath = Path.Combine(Application.dataPath, originalSpriteSheetRelativePath);
        string newSpriteSheetPath = Path.Combine(Application.dataPath, newSpriteSheetRelativePath);

        // Load the original sprite sheet texture
        Texture2D originalTexture = LoadTexture(originalSpriteSheetPath);
        if (originalTexture == null)
        {
            Debug.LogError("Failed to load the original sprite sheet texture.");
            return;
        }

        List<Texture2D> sprites = new List<Texture2D>();
        int cols = originalTexture.width / spriteWidth;
        int rows = originalTexture.height / spriteHeight;

        // Cut the sprites from the original texture
        for (int y = 0; y < rows; y++)
        {
            for (int x = 0; x < cols; x++)
            {
                int startX = x * spriteWidth;
                int startY = y * spriteHeight;
                sprites.Add(CutSprite(originalTexture, startX, startY, spriteWidth, spriteHeight));
            }
        }

        // Create a new texture with added empty space
        Texture2D newTexture = new Texture2D(originalTexture.width + cols * xOffset + extraPixelsLeft, originalTexture.height + rows * yOffset);
        for (int x = 0; x < newTexture.width; x++)
        {
            for (int y = 0; y < newTexture.height; y++)
            {
                newTexture.SetPixel(x, y, Color.clear); // Set the entire texture to transparent
            }
        }

        for (int i = 0; i < sprites.Count; i++)
        {
            int x = i % cols;
            int y = i / cols;

            int startX = x * (spriteWidth + xOffset) + extraPixelsLeft; // Add extraPixelsLeft to startX

            int startY = y * (spriteHeight + yOffset);

            PasteSprite(newTexture, sprites[i], startX, startY, xOffset, yOffset);
        }

        newTexture.Apply();

        // Save the new texture as a PNG file
        byte[] pngData = newTexture.EncodeToPNG();
        File.WriteAllBytes(newSpriteSheetPath, pngData);
    }

    private Texture2D LoadTexture(string path)
    {
        if (File.Exists(path))
        {
            byte[] fileData = File.ReadAllBytes(path);
            Texture2D texture = new Texture2D(2, 2);
            texture.LoadImage(fileData); // Autogenerated mipmaps might need to be disabled in some cases
            return texture;
        }
        else
        {
            Debug.LogError("File not found: " + path);
            return null;
        }
    }

    private Texture2D CutSprite(Texture2D texture, int startX, int startY, int width, int height)
    {
        Color[] pixels = texture.GetPixels(startX, startY, width, height);
        Texture2D sprite = new Texture2D(width, height);
        sprite.SetPixels(pixels);
        sprite.Apply();
        return sprite;
    }

    private void PasteSprite(Texture2D texture, Texture2D sprite, int startX, int startY, int xOffset, int yOffset)
    {
        for (int x = 0; x < sprite.width; x++)
        {
            for (int y = 0; y < sprite.height; y++)
            {
                Color pixel = sprite.GetPixel(x, y);
                texture.SetPixel(startX + x, startY + y, pixel);
            }
        }
    }
}
